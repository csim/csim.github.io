<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Consulting on Clint Simon</title><link>https://csim.github.io/tags/consulting/</link><description>Recent content in Consulting on Clint Simon</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 06 Aug 2014 08:00:00 -0800</lastBuildDate><atom:link href="https://csim.github.io/tags/consulting/index.xml" rel="self" type="application/rss+xml"/><item><title>Data Migration is Hard</title><link>https://csim.github.io/posts/2013/2013-08-06-data-migration-is-hard/</link><pubDate>Wed, 06 Aug 2014 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-08-06-data-migration-is-hard/</guid><description>Data migration can sink your project. It lurks around the edges of your estimation model, hiding deep dark secrets that will only be uncovered at the very end of the project. Nothing could be worse. Discovering that you need to increase the migration schedule 5 fold at the 11th hour can not only derail your project but if it happens too often it might derail your career.
I have learned a few lesson on this topic:</description></item><item><title>Moving the mountain, again.</title><link>https://csim.github.io/posts/2014/2014-05-05-mountain/</link><pubDate>Mon, 05 May 2014 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2014/2014-05-05-mountain/</guid><description>IT projects are difficult, long and arduous. Requirements change, budgets are tight, and deadlines loom like a dark cloud. Sometimes it feels like you are moving mountains to ship the project. It can be quite a grind. For people like us that care about the quality and craft of our work, this can become quite the pressure cooker.
We are very much invested in the success of the project and the success of the business as a whole.</description></item><item><title>What I look for in a Candidate</title><link>https://csim.github.io/posts/2013/2013-11-10-candidate/</link><pubDate>Sun, 10 Nov 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-11-10-candidate/</guid><description>Must have Experience. Nothing trumps experience. The more times you are &amp;ldquo;at-bat&amp;rdquo;, the more lessons you learn. Particularly experience at progressively higher of levels responsibility is desirable. Challenging yourself is ultimately the only way to grow and learn.
Technology aptitude. I don&amp;rsquo;t necessarily mean reciting minute technical details from memory. I mean understanding the underlying principles of technology. Abstraction, service oriented architecture, componentization, dependency injection, user experience design. Deep understand of these topics are what separates the great consultants from the rest.</description></item><item><title>Keeping Up with Technology</title><link>https://csim.github.io/posts/2012/2012-11-14-keeping-up-with-technology/</link><pubDate>Wed, 14 Nov 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-11-14-keeping-up-with-technology/</guid><description>Learning new technologies and techniques is a part of life for any software developer. Programming is a quest for knowledge and understanding which lasts your entire lifetime. No other profession has a more dynamic working environment. Tools change and evolve on a daily basis it seems. Learning is incumbent on all developers. Darwin&amp;rsquo;s law applies, adapt or perish.
Luckily most of us are used to this environment and thrive on the constantly changing landscape.</description></item><item><title>Be Lazy and Smart</title><link>https://csim.github.io/posts/2012/2012-11-07-be-lazy-and-smart/</link><pubDate>Wed, 07 Nov 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-11-07-be-lazy-and-smart/</guid><description>One of the best things that you can do as a developer is to be equal parts lazy and smart. This is an art that can be mastered to great effect. I don&amp;rsquo;t mean that you should abandon your passion for programming or stop being focused and goal driven. I mean that you should avoid work that is not absolutely necessary. To do that you need to be both lazy and smart in equal parts.</description></item><item><title>When your company breaks bad</title><link>https://csim.github.io/posts/2012/2012-10-23-when-your-company-breaks-bad/</link><pubDate>Tue, 23 Oct 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-10-23-when-your-company-breaks-bad/</guid><description>You have been working here for about 3 years. Life is good. You come in as late as you like and leave late because the work is challenging and rewarding. No one is watching over your shoulder, most days you sling code until your mind goes numb. At any moment a nerf gun war can break out in the office. When Halo 3 was released, all work stopped and there was an all-nighter in the game room.</description></item><item><title>Take Pride in Your Work</title><link>https://csim.github.io/posts/2012/2012-10-10-pride-in-your-work/</link><pubDate>Wed, 10 Oct 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-10-10-pride-in-your-work/</guid><description>In my daily work, I lead teams that build software. These are &amp;ldquo;line of business&amp;rdquo; or &amp;ldquo;enterprise&amp;rdquo; software systems. I come into contact with a lot of developers, all with differing backgrounds, experience levels and personalities. I see the good and the bad. Pride generally stands out as the most accurate quality indicator of the individual developer.
Having pride in your work makes you want to improve. If you are mindful of the effects that your work has on others, that can only lead to a better career path.</description></item><item><title>Training People</title><link>https://csim.github.io/posts/2012/2012-07-17-training-people/</link><pubDate>Tue, 17 Jul 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-07-17-training-people/</guid><description>Whether you know it or not, you are training everyone you interact with each day. When you answer that email at midnight or take that call at 8PM, you are sending a message. The message is that you work any time and you are willing to sacrifice your personal life for the job.
In typical over-achiever fashion, you are reacting to each request without regard for your personal well-being. After following this pattern for years, I have realized that I need to stop the vicious cycle.</description></item><item><title>Should you be a platform developer?</title><link>https://csim.github.io/posts/2011/2011-10-04-should-i-be-a-platform-developer/</link><pubDate>Tue, 04 Oct 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-10-04-should-i-be-a-platform-developer/</guid><description>Over the past few years I have seen many developers struggle with a growing dilemma, do I devote my time to platform development?
When I say &amp;ldquo;platform development&amp;rdquo; I mean building application on products such as Microsoft SharePoint and Microsoft CRM. The IT world is rapidly moving toward standardizing on platforms such as these. They offer lower IT costs, standardized infrastructure and overall lower cost of ownership. It makes sense from a business perspective, but what do you do as a developer?</description></item><item><title>Types of consultancies and how to pick one</title><link>https://csim.github.io/posts/2011/2011-07-21-types-of-consultancies-and-how-to-pick-one/</link><pubDate>Thu, 21 Jul 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-07-21-types-of-consultancies-and-how-to-pick-one/</guid><description>Over the years I have come across software consulting companies in various states. It occurs to me that there must be a finite set of categories that defines the culture of a consultancy. Here&amp;rsquo;s a few that I have recognized.
The oak tree. This company is rock solid and has been that way for many years. After establishing itself initially, stable but modest growth has lead to a consistency over time.</description></item><item><title>5 things you should do when estimating a technology project</title><link>https://csim.github.io/posts/2011/2011-03-04-5-things-you-should-do-when-a-technology-project/</link><pubDate>Fri, 04 Mar 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-03-04-5-things-you-should-do-when-a-technology-project/</guid><description>Estimating a project can be one of the hardest things you do as a technology consultant. Over the years I have done my share of estimation and one thing has become clear to me. Estimation accurately is almost impossible. With lots of experience and some hard knocks, you can accumulate the courage necessary to throw down an estimate. Here&amp;rsquo;s a few tips that I think might help.
Ask a lot of questions.</description></item></channel></rss>