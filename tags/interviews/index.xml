<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interviews on Clint Simon</title><link>https://csim.github.io/tags/interviews/</link><description>Recent content in Interviews on Clint Simon</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 10 Nov 2013 08:00:00 -0800</lastBuildDate><atom:link href="https://csim.github.io/tags/interviews/index.xml" rel="self" type="application/rss+xml"/><item><title>What I look for in a Candidate</title><link>https://csim.github.io/posts/2013/2013-11-10-candidate/</link><pubDate>Sun, 10 Nov 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-11-10-candidate/</guid><description>Must have Experience. Nothing trumps experience. The more times you are &amp;ldquo;at-bat&amp;rdquo;, the more lessons you learn. Particularly experience at progressively higher of levels responsibility is desirable. Challenging yourself is ultimately the only way to grow and learn.
Technology aptitude. I don&amp;rsquo;t necessarily mean reciting minute technical details from memory. I mean understanding the underlying principles of technology. Abstraction, service oriented architecture, componentization, dependency injection, user experience design. Deep understand of these topics are what separates the great consultants from the rest.</description></item><item><title>Tech Interview Question: The Clock Problem</title><link>https://csim.github.io/posts/2012/2012-10-12-clock-problem/</link><pubDate>Fri, 12 Oct 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-10-12-clock-problem/</guid><description>&amp;ldquo;The Clock Problem&amp;rdquo; is an interview question that I have been using for a few years. I first learned about it when I was being interviewed. I have now adopted it as my first line of defense against imposters. :)
It&amp;rsquo;s a simple problem that can be used to determine a candidate&amp;rsquo;s capacity for analytical problem solving. The beauty is that the problem has a simple and elegant solution which can be found in less than 10 minutes.</description></item></channel></rss>