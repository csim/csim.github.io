<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Clint Simon</title><link>https://csim.github.io/tags/programming/</link><description>Recent content in Programming on Clint Simon</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 27 Jul 2015 08:23:36 -0800</lastBuildDate><atom:link href="https://csim.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>MongoDB .Net Driver date handling</title><link>https://csim.github.io/posts/2015/2015-07-27-mongodb-date-handling/</link><pubDate>Mon, 27 Jul 2015 08:23:36 -0800</pubDate><guid>https://csim.github.io/posts/2015/2015-07-27-mongodb-date-handling/</guid><description>I ran into an interesting situation when saving dated to MongoDB using the Mongo .Net driver (version 2.0).
When saving a date with unspecified kind, the driver converts the date to a universal datetime. It appears that the driver will assume that a DateTime object with an unspecified kind is a local time, and convert it to universal time (UTC) before committing it to the database.
In my particular case, my origin date was UTC and was read from SQL server.</description></item><item><title>Data Migration is Hard</title><link>https://csim.github.io/posts/2013/2013-08-06-data-migration-is-hard/</link><pubDate>Wed, 06 Aug 2014 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-08-06-data-migration-is-hard/</guid><description>Data migration can sink your project. It lurks around the edges of your estimation model, hiding deep dark secrets that will only be uncovered at the very end of the project. Nothing could be worse. Discovering that you need to increase the migration schedule 5 fold at the 11th hour can not only derail your project but if it happens too often it might derail your career.
I have learned a few lesson on this topic:</description></item><item><title>Bootstrap size indicator</title><link>https://csim.github.io/posts/2014/2014-06-06-bootstrap-size-indicator/</link><pubDate>Fri, 06 Jun 2014 08:23:36 -0800</pubDate><guid>https://csim.github.io/posts/2014/2014-06-06-bootstrap-size-indicator/</guid><description>I have been doing work with Bootstrap 3 as of late. When building responsive layouts, I find it very handy to immediately see which predefined size group you are currently viewing. Hereâ€™s a little snippet that shows the current Bootstrap size modifier.
This is especially helpful when viewing a page from a mobile device or table. You can easily deduce which size group maps to a particular device in each orientation.</description></item><item><title>Embed video in SharePoint</title><link>https://csim.github.io/posts/2013/2013-11-25-embed-video-sharepoint/</link><pubDate>Mon, 25 Nov 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-11-25-embed-video-sharepoint/</guid><description>I recently had to embed a full-screen video into a SharePoint 2010 page (don&amp;rsquo;t ask). Here is the solution using the default silverlight embeded video player which is packaged with SharePoint 2010.</description></item><item><title>Keyboard Manual Registry Settings</title><link>https://csim.github.io/posts/2013/2013-11-25-keyboard-registry-settings/</link><pubDate>Mon, 25 Nov 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-11-25-keyboard-registry-settings/</guid><description>I have always had a sneaking suspicion that my keyboard repeat rate and repeat delay settings were a little too slow for my taste. Windows only lets to you increase the values in a fixed range but with a registry change, you can adjust as you please.
Play around with AutoRepeatDelay and AutoRepeatRate, these are the settings that work for me.
Don&amp;rsquo;t set the AutoRepeatDelay too fast, it will make it so that when you type letters they are repeated immediately.</description></item><item><title>PowerShell Sublime Text Shortcut</title><link>https://csim.github.io/posts/2013/2013-11-04-powershell-sublime-shortcut/</link><pubDate>Mon, 04 Nov 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-11-04-powershell-sublime-shortcut/</guid><description>Lately I have been learning about Git and GitHub. Most of this work is done at the command line, I have found myself quickly amassing PowerShell functions that acts as shortcuts.
One very handy shortcut is the ability to launch the sublime text editor and open the current directory as a project. Or alternately passing in a file to edit.
Once this function is in your powershell profile, just type &amp;ldquo;edit&amp;rdquo; at the command prompt and sublime will open the current folder.</description></item><item><title>How I learned to code</title><link>https://csim.github.io/posts/2013/2013-08-10-how-i-learned-to-code/</link><pubDate>Sat, 10 Aug 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-08-10-how-i-learned-to-code/</guid><description>I&amp;rsquo;m not a long-term planner. I&amp;rsquo;ve never made a &amp;ldquo;5 year plan&amp;rdquo; or thought about where I want to be 10 years from now. I simply look at what my options are and make a decision about what to do next.
I only learned to code because my dad needed a problem solved. He ran a consulting business where he needed to perform regular equipment maintenance. It was 1996 and the web was new.</description></item><item><title>Rediscovering Code</title><link>https://csim.github.io/posts/2013/2013-08-07-rediscovering-code/</link><pubDate>Wed, 07 Aug 2013 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2013/2013-08-07-rediscovering-code/</guid><description>Over the past year or so, my career has taken a turn toward what I would call &amp;ldquo;pure consulting&amp;rdquo; or put more plainly, &amp;ldquo;giving people my opinion&amp;rdquo;. During this time I really hadn&amp;rsquo;t written any code to speak of, minus some small side projects. There just wasn&amp;rsquo;t a need for it and frankly I had my hands full.
All that changed when I started a new project and took ownership of a large chunk of functionality.</description></item><item><title>Keeping Up with Technology</title><link>https://csim.github.io/posts/2012/2012-11-14-keeping-up-with-technology/</link><pubDate>Wed, 14 Nov 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-11-14-keeping-up-with-technology/</guid><description>Learning new technologies and techniques is a part of life for any software developer. Programming is a quest for knowledge and understanding which lasts your entire lifetime. No other profession has a more dynamic working environment. Tools change and evolve on a daily basis it seems. Learning is incumbent on all developers. Darwin&amp;rsquo;s law applies, adapt or perish.
Luckily most of us are used to this environment and thrive on the constantly changing landscape.</description></item><item><title>Remember, Software is Soft</title><link>https://csim.github.io/posts/2012/2012-11-09-remember-software-is-soft/</link><pubDate>Fri, 09 Nov 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-11-09-remember-software-is-soft/</guid><description>There are times when I have witness (and participated in) arguments about trade-offs between scope and effort. Sometimes developers tend to push back fairly hard with the perception is that the effort is too high for a particular feature change.
Coders can become downright defensive when you are talking about changing the fundamentals of an application. After all, this is their baby and someone just through it out with the bathwater.</description></item><item><title>Be Lazy and Smart</title><link>https://csim.github.io/posts/2012/2012-11-07-be-lazy-and-smart/</link><pubDate>Wed, 07 Nov 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-11-07-be-lazy-and-smart/</guid><description>One of the best things that you can do as a developer is to be equal parts lazy and smart. This is an art that can be mastered to great effect. I don&amp;rsquo;t mean that you should abandon your passion for programming or stop being focused and goal driven. I mean that you should avoid work that is not absolutely necessary. To do that you need to be both lazy and smart in equal parts.</description></item><item><title>It doesn't matter what it is. Start Now.</title><link>https://csim.github.io/posts/2012/2012-10-30-start-now/</link><pubDate>Tue, 30 Oct 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-10-30-start-now/</guid><description>It&amp;rsquo;s funny, I put off writing this post for over a week. That might make me a hypocrite but it doesn&amp;rsquo;t mean that the truth is less important. Procrastination is the enemy.
If you want to get something done, start immediately and fail often.
There are a million reasons not to start right away. Maybe you won&amp;rsquo;t be any good at it, or you have more important things to do. Maybe you are just plain scared of judgment from your peers.</description></item><item><title>Tech Interview Question: The Clock Problem</title><link>https://csim.github.io/posts/2012/2012-10-12-clock-problem/</link><pubDate>Fri, 12 Oct 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-10-12-clock-problem/</guid><description>&amp;ldquo;The Clock Problem&amp;rdquo; is an interview question that I have been using for a few years. I first learned about it when I was being interviewed. I have now adopted it as my first line of defense against imposters. :)
It&amp;rsquo;s a simple problem that can be used to determine a candidate&amp;rsquo;s capacity for analytical problem solving. The beauty is that the problem has a simple and elegant solution which can be found in less than 10 minutes.</description></item><item><title>Take Pride in Your Work</title><link>https://csim.github.io/posts/2012/2012-10-10-pride-in-your-work/</link><pubDate>Wed, 10 Oct 2012 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2012/2012-10-10-pride-in-your-work/</guid><description>In my daily work, I lead teams that build software. These are &amp;ldquo;line of business&amp;rdquo; or &amp;ldquo;enterprise&amp;rdquo; software systems. I come into contact with a lot of developers, all with differing backgrounds, experience levels and personalities. I see the good and the bad. Pride generally stands out as the most accurate quality indicator of the individual developer.
Having pride in your work makes you want to improve. If you are mindful of the effects that your work has on others, that can only lead to a better career path.</description></item><item><title>The case of the 30 day memcache timeout on app engine</title><link>https://csim.github.io/posts/2011/2011-10-28-the-case-of-the-30-day-memcache-timeout-on-app-engine/</link><pubDate>Fri, 28 Oct 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-10-28-the-case-of-the-30-day-memcache-timeout-on-app-engine/</guid><description>I ran into an interesting problem with Google app engine. It seems that the memcache time limit is enforced differently on the development server versus the production servers.
The documentation says that the time limit for a memcache key is 30 days. The behavior that I have observed is that if you set a memcache key to timeout at 30 days, the development server (on windows) will happily persist the data as expected.</description></item><item><title>Should you be a platform developer?</title><link>https://csim.github.io/posts/2011/2011-10-04-should-i-be-a-platform-developer/</link><pubDate>Tue, 04 Oct 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-10-04-should-i-be-a-platform-developer/</guid><description>Over the past few years I have seen many developers struggle with a growing dilemma, do I devote my time to platform development?
When I say &amp;ldquo;platform development&amp;rdquo; I mean building application on products such as Microsoft SharePoint and Microsoft CRM. The IT world is rapidly moving toward standardizing on platforms such as these. They offer lower IT costs, standardized infrastructure and overall lower cost of ownership. It makes sense from a business perspective, but what do you do as a developer?</description></item><item><title>How to add your last tweet to your blog</title><link>https://csim.github.io/posts/2011/2011-09-30-how-to-add-your-last-tweet-to-your-blog/</link><pubDate>Fri, 30 Sep 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-09-30-how-to-add-your-last-tweet-to-your-blog/</guid><description>I thought it would be nice to see my last tweet on my blog. It turns out that there is an easy way to do this using jquery and the twitter api. These instructions may not work for you if your blogging platform does not allow embedded JavaScript (wordpress.com does not).
To get the tweets for any user in JSON format you can visit http://api.twitter.com/1/statuses/user_timeline/username.json?callback=?
Where username is the twitter username.</description></item><item><title>How to get started with OData</title><link>https://csim.github.io/posts/2011/2011-06-06-how-to-get-started-with-odata/</link><pubDate>Mon, 06 Jun 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-06-06-how-to-get-started-with-odata/</guid><description>Open data protocol or OData is a new Microsoft technology standard which allows for simple data exchange over a REST style interface. The idea is to create a web based interface for complex data stores and in the process free data from silos. This will in theory create a data utopia complete with bunnies, fairies and a side of mash potatoes.
There are a couple of intriguing facets to this proposition.</description></item><item><title>Code is Creative</title><link>https://csim.github.io/posts/2011/2011-02-14-code-is-creative/</link><pubDate>Mon, 14 Feb 2011 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2011/2011-02-14-code-is-creative/</guid><description>Most people think of programmers as the guys guzzling mountain dew in a dark room where pizza slides under the door at around 6PM and a feature is built by 2AM. Although this is can be the case (we&amp;rsquo;ve all been there), I have found that most of the people that I look up to are not at all like this. More often than not people who have influenced me over the years are people that show a genuine passion for software but also have massive creative energy and a social team mentality to boot.</description></item><item><title>Using the SharePoint content database as a cache</title><link>https://csim.github.io/posts/2008/2008-09-12-using-the-sharepoint-content-database-as-a-cache/</link><pubDate>Fri, 12 Sep 2008 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2008/2008-09-12-using-the-sharepoint-content-database-as-a-cache/</guid><description>Data caching is a core concept in the web dominated world that we live in. The premise is that we should not have to go back to retrieve data from a data store for every single web request when the data is unchanged, thereby sharing data across web requests. This offers huge performance advantages because all latency related to data fetching, query processing and transmission is eliminated for requests that use the same data.</description></item><item><title>Custom Field control implemented as a User Control</title><link>https://csim.github.io/posts/2008/2008-03-13-custom-field-control-implemented-as-a-user-control/</link><pubDate>Thu, 13 Mar 2008 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2008/2008-03-13-custom-field-control-implemented-as-a-user-control/</guid><description>When creating custom controls it is often must easier to create a control using the &amp;ldquo;User Control&amp;rdquo; development model instead of the &amp;ldquo;Server Control&amp;rdquo; model. Server controls generally have a more &amp;ldquo;low level&amp;rdquo; feel and dictate that the developer build the control&amp;rsquo;s rendering from scratch. Either by building a control tree or by constructing the rendered output in code.
Alternatively user controls have nice separation of code and presentation by virtue of having a markup file (.</description></item><item><title>SharePoint Custom Application Development Methodologies</title><link>https://csim.github.io/posts/2008/2008-01-07-sharepoint-custom-application-development-methodologies/</link><pubDate>Mon, 07 Jan 2008 08:00:00 -0800</pubDate><guid>https://csim.github.io/posts/2008/2008-01-07-sharepoint-custom-application-development-methodologies/</guid><description>As SharePoint becomes more prevalent in the custom application development realm, there has been some friction and malcontent expressed in relation to deployment processes, team development methods and application upgrade paths. I believe that Microsoft has fallen short on providing the tools necessary to promote and support custom application development on the SharePoint platform.
In my opinion, the SharePoint platform should not limit nor impede my ability as a custom application developer to deliver solutions that follow the same deployment principals as any other custom asp.</description></item></channel></rss>